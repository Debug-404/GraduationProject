<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.StudentMapper">

    <resultMap id="StudentMap" type="com.model.Student">
        <result property="dormBuildId" column="dormbuild_id"/>
        <result property="dormRoomId" column="dormroom_id"/>
    </resultMap>
    <resultMap id="cont" type="java.lang.Integer">
        <result column="count"/>
    </resultMap>
    <select id="findAll" resultMap="StudentMap">
        select id, password, name, age, sex, phone, dormroom_id
        from student
        where flag != 0
    </select>

    <select id="findByLimit" resultMap="StudentMap" parameterType="map">
        select id, password, name, age, sex, phone, dormroom_id
        from student
        limit #{startIndex},#{pageSize}
    </select>

    <select id="selectStudentById" resultMap="StudentMap">
        select id, password, name, age, sex, phone, dormroom_id
        from student
        where id = #{id}
          and flag != 0
    </select>
    <select id="stuNum" resultType="java.lang.Integer">
        select count(*)
        from student
        where flag != 0
    </select>
    <select id="find" resultMap="StudentMap" parameterType="map">
        select SQL_CALC_FOUND_ROWS id,
                                   password,
                                   name,
                                   age,
                                   sex,
                                   phone,
                                   dormbuild_id,
                                   dormroom_id
        from student
        where name like #{search}
          and flag != 0
        limit #{startIndex},#{pageSize};
        select FOUND_ROWS();
    </select>

    <insert id="addStudent" parameterType="com.model.Student">
        insert into student(id, password, name, age, sex, phone, dormroom_id)
            value (#{id}, #{password}, #{name}, #{age}, #{sex}, #{phone}, #{dormroom_id})
    </insert>

    <insert id="repair" parameterType="map">
        insert into apply(sid, sname, region, room_no, sphone, type, details)
            value (#{sid}, #{name}, #{region}, #{roomNo}, #{phone}, #{type}, #{details})
    </insert>

    <update id="deleteStudent" parameterType="String">
        update student
        set flag=0
        where id = #{id}
    </update>

    <update id="updateStudent" parameterType="com.model.Student">
        update student
        SET name        = #{name},
            age         = #{age},
            sex         =#{sex},
            phone       = #{phone},
            dormroom_id = #{dormroom_id}
        where id = #{id}
    </update>

    <update id="updatePassword" parameterType="map">
        update student
        set password = #{password}
        where id = #{id}
    </update>
</mapper>